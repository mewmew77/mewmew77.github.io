<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ansible 踩坑记录</title>
    <url>/2023/01/09/ansible-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>down掉目标主机网口后，ansible-playbook 执行很长时间才返回ssh连接超时错误</p>
<h2 id="复现经过："><a href="#复现经过：" class="headerlink" title="复现经过："></a>复现经过：</h2><p>方式一：直接将对应网口down掉，执行ansible-playbook，很快报错，未复现；<br>方式二：先正常执行一次ansible-playbook，执行完成后down掉网口，再次执行ansible-playbook,复现成功；</p>
<h2 id="问题原因：ssh多路复用"><a href="#问题原因：ssh多路复用" class="headerlink" title="问题原因：ssh多路复用"></a>问题原因：<strong>ssh多路复用</strong></h2><p>为了提升ansible的执行效率，启用了ssh的多路复用（可以认为是建立长链接），即在首次 ssh 连接之后，将该连接保持在后台，并在后续连接时重用该连接，<br>从而减少连接建立和认证的时间，提高连接速度和效率。对应ansible配置文件 <code>ansible/ansible.cfg</code> 内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh_args = -o ControlMaster=auto -o ControlPersist=600s</span><br></pre></td></tr></table></figure></div>
<p>也就是说，当网口up时ssh连接成功后会保持这个连接通道，直到600s后过期销毁。<br>在有效期内，down掉目标主机对应网口，再次执行ansible-playbook进行ssh连接，则会重用之前的连接。<br>ssh连接还存在，但目标主机已经不通了，再次使用这个连接就会直到此连接到期销毁才能检测到错误并返回</p>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>配置文件中添加如下配置参数，每30s对目标节点进行心跳检测，若尝试2次都失败，则销毁此连接；再次重连时就会尝试创建新的ssh连接。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh_args = -o ControlMaster=auto -o ControlPersist=600s -o ServerAliveInterval=30 -o ServerAliveCountMax=2</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus 本地存储和内存分析</title>
    <url>/2023/06/23/prometheus%E4%BD%BF%E7%94%A8%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="prometheus的存储机制："><a href="#prometheus的存储机制：" class="headerlink" title="prometheus的存储机制："></a>prometheus的存储机制：</h2><p>默认每隔2小时做一次数据落盘，在落盘前，所有的数据都保存在内存里</p>
<h2 id="本地存储占用："><a href="#本地存储占用：" class="headerlink" title="本地存储占用："></a>本地存储占用：</h2><p>计算公式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">needed_disk_space = retention_time_seconds * ingested_samples_per_second * bytes_per_sample</span><br><span class="line">// retention_time_seconds : 留存时间（s）</span><br><span class="line">// ingested_samples_per_second ： 平均每秒采集的样本数</span><br><span class="line">// bytes_per_sample ： 平均每个样本的大小</span><br></pre></td></tr></table></figure></div>

<p><strong>计算方法</strong>:  </p>
<ol>
<li>需要先开启prometheus自监控，修改prometheus.yml配置文件内容如下</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrap_configs:</span><br><span class="line">    - job_name: &quot;prometheus&quot;</span><br><span class="line">    static_configs:</span><br><span class="line">        - targets: [&quot;localhots:9090&quot;]</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>使用promQL查询，查询语句如下：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">留存时间(s)* (rate(prometheus_tsdb_head_samples_appended_total[1d]) *(rate(prometheus_tsdb_compaction_chunk_size_bytes_sum[1d]) / rate(prometheus_tsdb_compaction_chunk_samples_sum[1d])))</span><br><span class="line">// 1d：以一天采集到的指标平均值作为计算标准，可根据实际情况修改</span><br></pre></td></tr></table></figure></div>
<p>注：以上计算没有把WAL文件加进去</p>
<h2 id="内存消耗："><a href="#内存消耗：" class="headerlink" title="内存消耗："></a>内存消耗：</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">内存消耗主要由 Prometheus 服务自身的内存消耗、 抓取指标的内存消耗 、 查询带来的内存消耗组成</span><br><span class="line">// 抓取指标的内存消耗： 落盘前抓取到到数据都保存在内存里</span><br><span class="line">// 查询带来的内存消耗： 查询时，若查询时间间隔内的数据不在内存中，则会把这部分数据从磁盘加载到内存里提供查询，从而带来内存消耗</span><br></pre></td></tr></table></figure></div>
<p>注： 以上计算方法均为估算</p>
<h2 id="降低内存消耗方法"><a href="#降低内存消耗方法" class="headerlink" title="降低内存消耗方法"></a>降低内存消耗方法</h2><p>核心思想：减少保存到内存到指标样本数量，具体方法如下</p>
<ol>
<li>缩短落盘时间间隔<br>修改prometheus启动参数，添加以下参数<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- storage.tsdb.min-block-duration = 30m //最小落盘时间间隔</span><br><span class="line">-- storage.tsdb.max-block-duration = 40m //最大落盘时间间隔</span><br></pre></td></tr></table></figure></div></li>
<li>减少不必要的指标样本存储；如果能确定，最好之只采集需要的指标<ol>
<li>从exporter修改，减少暴露给prometheus的指标</li>
<li>从Prometheus修改，过滤不需要的指标数据。修改prometheus.yml文件内容<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrap_configs:</span><br><span class="line">    - job_name: &quot;prometheus&quot;</span><br><span class="line">    static_configs:</span><br><span class="line">        - targets: [&quot;localhots:9090&quot;]</span><br><span class="line">    metric_relabel_configs:</span><br><span class="line">        source_labels: [ __name__]</span><br><span class="line">        regex: ^xxxx*  #要丢弃的指标，支持正则</span><br><span class="line">        action: drop</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ol>
<p>参考：<br>官方文档：<a class="link"   href="https://prometheus.io/docs/introduction/overview/" >https://prometheus.io/docs/introduction/overview/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>prometheus使用空间计算器：<a class="link"   href="https://www.robustperception.io/how-much-ram-does-prometheus-2-x-need-for-cardinality-and-ingestion/" >https://www.robustperception.io/how-much-ram-does-prometheus-2-x-need-for-cardinality-and-ingestion/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>fiddler对手机抓包</title>
    <url>/2023/08/16/fiddler%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="下载fiddler"><a href="#下载fiddler" class="headerlink" title="下载fiddler"></a>下载fiddler</h2><p><a class="link"   href="https://www.telerik.com/download/fiddler" >https://www.telerik.com/download/fiddler <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>下载后直接根据指引一路安装即可</p>
<h2 id="查看fiddler分配的ip地址"><a href="#查看fiddler分配的ip地址" class="headerlink" title="查看fiddler分配的ip地址"></a>查看fiddler分配的ip地址</h2><p>点击软件右上角的<code>online</code>按钮，可查看当前ip地址<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/WechatIMG21.jpeg"
                      alt="Test"
                ></p>
<h2 id="查看fiddler使用的端口"><a href="#查看fiddler使用的端口" class="headerlink" title="查看fiddler使用的端口"></a>查看fiddler使用的端口</h2><p>点击 help &gt; About Fiddler 即可查看<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/WechatIMG23.jpeg"
                      alt="Test"
                ></p>
<h2 id="配置手机网络"><a href="#配置手机网络" class="headerlink" title="配置手机网络"></a>配置手机网络</h2><ol>
<li>将手机和打开fiddler的电脑连接同一个wifi网络下</li>
<li>手机修改wifi设置 –&gt; 配置代理，选择手动 –&gt; 服务器就是前面查看的fiddler分配的ip地址；端口就是前面查看的fiddler端口</li>
</ol>
<p>到这里就完成了，正常的情况下，这时候用手机去访问一些网站就可以通过fiddler查看到这个网站发出的http请求详情了</p>
<h2 id="实际操作遇到的坑"><a href="#实际操作遇到的坑" class="headerlink" title="实际操作遇到的坑"></a>实际操作遇到的坑</h2><p>使用公司的网络可以，但是家里的wifi或者手机热点都不行<br>解决办法： 关闭使用fiddler的电脑的防火墙</p>
]]></content>
      <tags>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>fio 性能测试</title>
    <url>/2024/03/09/fio%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><h4 id="1-1-源码安装"><a href="#1-1-源码安装" class="headerlink" title="1.1 源码安装"></a>1.1 源码安装</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载</span><br><span class="line">git clone https://github.com/axboe/fio.git</span><br><span class="line"></span><br><span class="line">编译安装</span><br><span class="line"># cd fio/</span><br><span class="line"># ./configure</span><br><span class="line"># make</span><br><span class="line"># make install</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="1-2-yum-安装-–-可行"><a href="#1-2-yum-安装-–-可行" class="headerlink" title="1.2 yum 安装 – 可行"></a>1.2 yum 安装 – 可行</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install fio</span><br></pre></td></tr></table></figure></div>

<h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h3><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p><code>fio -directory=/mnt/test -ioengine=libaio -iodepth=1 -direct=1 -fsync=1 -bs=16M -filesize=10G --rw=write -numjobs=32 -name=fiotest -group_reporting -output=/root/test -runtime 300</code></p>
<h4 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">directory</span><br><span class="line">例. directory=/mnt/test 要写入的目标目录</span><br><span class="line"></span><br><span class="line">filename</span><br><span class="line">例. filename=/dev/emcpowerb 要写入的目标文件</span><br><span class="line"></span><br><span class="line">direct</span><br><span class="line">例. direct=1 测试过程绕过机器自带的buffer，使测试结果更真实</span><br><span class="line"></span><br><span class="line">rw</span><br><span class="line">例. </span><br><span class="line">rw=randwread  测试随机读的I/O</span><br><span class="line">rw=randwrite  测试随机写的I/O</span><br><span class="line">rw=randrw     测试随机混合写和读的I/O</span><br><span class="line">rw=read       测试顺序读的I/O</span><br><span class="line">rw=write      测试顺序写的I/O</span><br><span class="line">rw=rw         测试顺序混合写和读的I/O</span><br><span class="line"></span><br><span class="line">bs</span><br><span class="line">例. bs=4k 单次io的块文件大小为4k</span><br><span class="line"></span><br><span class="line">bsrange</span><br><span class="line">例. bsrange=512-2048 指定数据块的大小范围</span><br><span class="line"></span><br><span class="line">size</span><br><span class="line">例. size=5g 本次的测试文件大小为5g</span><br><span class="line"></span><br><span class="line">numjobs</span><br><span class="line">例. numjobs=30 本次的测试线程为30</span><br><span class="line"></span><br><span class="line">runtime</span><br><span class="line">例.runtime=1000 测试时间为1000秒，如果不写则一直将5g文件分bs大小每次写完为止</span><br><span class="line"></span><br><span class="line">name</span><br><span class="line">例. name=jobname 测试的任务名字</span><br><span class="line"></span><br><span class="line">ioengine</span><br><span class="line">例.ioengine=psync io引擎使用pync方式，如果要使用libaio引擎，需要yum install libaio-devel</span><br><span class="line"> libaio</span><br><span class="line"> libaio是linux本地异步IO</span><br><span class="line"> </span><br><span class="line">rwmixwrite</span><br><span class="line">例.rwmixwrite=30 在混合读写的模式下，写占30%</span><br><span class="line"></span><br><span class="line">group_reporting</span><br><span class="line">例. group_reporting 测试结果汇总每个进程的信息</span><br><span class="line"></span><br><span class="line">thread</span><br><span class="line">例.thread 使用pthread_create创建线程</span><br><span class="line"></span><br><span class="line">iodepth</span><br><span class="line">例.iodepth=8 队列深度为8 </span><br><span class="line"></span><br><span class="line">nrfiles</span><br><span class="line">例.nrfiles=8 单个进程生成文件的数量</span><br></pre></td></tr></table></figure></div>
<h3 id="3-多客户端测试"><a href="#3-多客户端测试" class="headerlink" title="3.多客户端测试"></a>3.多客户端测试</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>客户端节点信息，客户端ip地址</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat client.list</span><br><span class="line">192.168.0.1</span><br><span class="line">192.168.0.2</span><br><span class="line">192.168.0.3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>测试文件<br>[global]用于配置全局参数，[job1]用于配置具体的测试任务</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">ioengine=libaio </span><br><span class="line">iodepth=1 </span><br><span class="line">direct=1 </span><br><span class="line">fsync=1 </span><br><span class="line">bs=16M </span><br><span class="line">filesize=10G </span><br><span class="line">rw=write </span><br><span class="line">numjobs=32</span><br><span class="line">[job1]</span><br><span class="line">filename=/mnt/tes</span><br></pre></td></tr></table></figure></div>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>多客户端测试方法一致：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fio --client=host.list fio.job</span><br></pre></td></tr></table></figure></div>

<p>多客户端测试方法不一致：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fio --client=192.168.0.1 fio1.job --client=192.168.0.2 fio2.job  --client=192.168.0.3 fio3.job </span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>fio</tag>
      </tags>
  </entry>
  <entry>
    <title>fuzz测试</title>
    <url>/2024/10/05/fuzz%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="什么是Fuzz测试？"><a href="#什么是Fuzz测试？" class="headerlink" title="什么是Fuzz测试？"></a>什么是Fuzz测试？</h3><p>将自动或半自动生成的随机数据输入到一个程序中，并监视程序异常，如崩溃，断言（assertion）失败，以发现可能的程序错误，比如内存泄漏。</p>
<h3 id="Go语言实现Fuzz测试"><a href="#Go语言实现Fuzz测试" class="headerlink" title="Go语言实现Fuzz测试"></a>Go语言实现Fuzz测试</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">func FuzzCalculate(f *testing.F) &#123;</span><br><span class="line">	for _, one := range Data &#123;</span><br><span class="line">		f.Add(one.A, one.B)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	f.Fuzz(func(t *testing.T, a, b int) &#123;</span><br><span class="line">		defer func() &#123;</span><br><span class="line">			if r := recover(); r != nil &#123;</span><br><span class="line">				// 实际应用可将此处改为发送邮件/聊天机器人通知等方式通知开发者</span><br><span class="line">				t.Errorf(&quot;params : a %d, b:%d \n ---%v&quot;, a, b, r)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line">		res := Div(a, b)</span><br><span class="line">		t.Logf(&quot;res = %v&quot;, res)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="执行Fuzz测试"><a href="#执行Fuzz测试" class="headerlink" title="执行Fuzz测试"></a>执行Fuzz测试</h3><p><code>go test -v -run=FuzzDiv -fuzz=Fuzz -fuzztime 10s</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-fuzz 用于指定要运行的fuzz测试函数的正则表达式</span><br><span class="line">-fuzztime 控制fuzz测试的持续时间</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fuzz/fuzz-res.png"
                      alt="Test"
                ></p>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>redis安装</title>
    <url>/2023/05/03/redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="单节点安装redis"><a href="#单节点安装redis" class="headerlink" title="单节点安装redis"></a>单节点安装redis</h2><ol>
<li><p>官网下载redis安装包，地址：<a class="link"   href="https://redis.io/downloads/" >https://redis.io/downloads/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>执行以下命令解压</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar xvf redis-7.0.15.tar.gz</span><br></pre></td></tr></table></figure></div></li>
<li><p>进入解压后的目录，执行make命令进行编译</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd redis-7.0.15</span><br><span class="line">make</span><br></pre></td></tr></table></figure></div></li>
<li><p>编译完成后进入src目录，执行make install 进行安装，PREFIX参数指定的路径即为redis安装路径</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure></div></li>
<li><p>安装完成后修改redis配置文件<br>查看安装路径 &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin下是否有redis.conf文件。若没有，则需要取原解压文件下拷贝redis.conf到 &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin 目录下<br>配置文件修改内容如下，port为redis启动端口，修改时需确认该端口未被占用。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">port 61199</span><br><span class="line">protected-mode no</span><br><span class="line">bind 0.0.0</span><br><span class="line">logfile &quot;/var/log/redis/redis.log&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置redis服务开机自启动，执行一下命令，创建redis系统服务</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure></div>
<p>输入以下内容并保存</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Redis Server</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf</span><br><span class="line">ExecStop=/usr/local/redis/bin/redis-cli shutdown</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target   </span><br></pre></td></tr></table></figure></div></li>
<li><p>执行以下命令，启动redis</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl deamon-reload</span><br><span class="line">sudo systemctl enable redis.service</span><br><span class="line">sudo systemctl start redis.service</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
